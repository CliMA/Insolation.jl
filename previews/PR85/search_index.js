var documenterSearchIndex = {"docs":
[{"location":"Milankovitch/#Milankovitch-Cycles","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"","category":"section"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"Milankovitch cycles are variations in Earth's orbital parameters (eccentricity, obliquity, and precession) that occur over geological timescales. These cycles affect the distribution and amount of solar radiation reaching Earth's surface, driving long-term climate variations and ice age cycles.","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"Insolation.jl includes the Laskar et al. (2004) solution for Earth's orbital parameters, spanning -50 Myr to +20 Myr around the J2000 epoch. This allows accurate paleoclimate calculations for ice age studies, interglacial periods, and long-term climate reconstructions.","category":"page"},{"location":"Milankovitch/#The-Three-Orbital-Parameters","page":"Milankovitch Cycles","title":"The Three Orbital Parameters","text":"","category":"section"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"Eccentricity (e): The shape of Earth's orbit, ranging from nearly circular (e≈0) to more elliptical (e≈0.06). Current value: ~0.0167. Period: ~100,000 years.\nObliquity (γ): Earth's axial tilt, varying between ~22° and 24.5°. Current value: ~23.44°. Period: ~41,000 years. Controls the strength of seasonal cycles.\nPrecession (ϖ): The longitude of perihelion, determining when during the year Earth is closest to the Sun. Period: ~21,000 years. Affects the timing and intensity of seasons.","category":"page"},{"location":"Milankovitch/#Variations-in-orbital-parameters","page":"Milankovitch Cycles","title":"Variations in orbital parameters","text":"","category":"section"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"using Insolation\nusing Plots\n\n# Load orbital parameter data (Laskar et al. 2004)\nod = OrbitalDataSplines()\n\n# Time range: ±500,000 years from present (J2000)\ndt = collect(-500e3:100:500e3); # years\n\n# Extract orbital parameters over time\ny = hcat(collect.(orbital_params.(od, dt))...);\nϖ, γ, e = y[1,:], y[2,:], y[3,:];\n\n# Plot precession (as sin(ϖ) to show periodicity)\np1 = plot(dt ./ (1e3), sin.(ϖ), legend=false);\nylabel!(\"sin(ϖ) [Precession]\");\ntitle!(\"Longitude of Perihelion\");\n\n# Plot obliquity (axial tilt)\np2 = plot(dt ./ (1e3), rad2deg.(γ), legend=false);\nylabel!(\"γ [degrees]\");\ntitle!(\"Obliquity (Axial Tilt)\");\n\n# Plot eccentricity (orbital shape)\np3 = plot(dt ./ (1e3), e, legend=false);\nylabel!(\"e [unitless]\");\nxlabel!(\"Time (kyr before present)\")\ntitle!(\"Eccentricity\");\n\nplot(p1, p2, p3, layout = grid(3,1), size=(600,500), dpi=250);\nsavefig(\"orbital_params.png\")\nnothing # hide","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"(Image: )","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"The three panels show the periodic variations in Earth's orbital parameters:","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"Top: Precession varies with ~21 kyr period, controlling seasonal timing\nMiddle: Obliquity oscillates between ~22-25° with ~41 kyr period\nBottom: Eccentricity varies with ~100 kyr and ~400 kyr periods","category":"page"},{"location":"Milankovitch/#Calendar-Considerations:-Equinox-and-Perihelion-Dates","page":"Milankovitch Cycles","title":"Calendar Considerations: Equinox and Perihelion Dates","text":"","category":"section"},{"location":"Milankovitch/#Centennial-Timescales-(1800-2200-CE)","page":"Milankovitch Cycles","title":"Centennial Timescales (1800-2200 CE)","text":"","category":"section"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"On timescales of centuries, the dates of astronomical events like the vernal equinox and perihelion vary slightly due to precession and calendar adjustments.","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"using Insolation\nusing Roots\nusing Optim\ninclude(\"find_equinox_perihelion_dates.jl\")\n\nyears = 1800:2200;\ndays_eq = zeros(length(years));\ndays_per = zeros(length(years));\nod = OrbitalDataSplines()\n\n# Find vernal equinox and perihelion dates for each year\nfor (i,year) in enumerate(years)\n    # Vernal equinox: when declination crosses zero in spring\n    f = (x -> zdiff(x, year, od))\n    days_eq[i] = find_zeros(f,-30,60)[1]\n\n    # Perihelion: when planet-star distance is minimum\n    f = (x -> edist(x, year, od))\n    res = optimize(f,-50,50)\n    days_per[i] = Optim.minimizer(res)[1]\nend\n\np1 = plot((years), days_eq, legend=false, dpi=250, lw=2)\nxlabel!(\"Year\")\nylabel!(\"Day in March\")\ntitle!(\"Date of Vernal Equinox\")\nsavefig(\"equinox_dates.png\")\n\np2 = plot((years), days_per, legend=false, dpi=250, lw=2)\nxlabel!(\"Year\")\nylabel!(\"Day in January\")\ntitle!(\"Date of Perihelion\")\nsavefig(\"perihelion_dates.png\")\nnothing # hide","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"Historical Context: The Gregorian calendar reform (1582 CE) introduced leap years and century rules specifically to keep the vernal equinox near March 21. This stabilizes the calendar for seasonal events, but small variations still occur due to differences in the length of the tropical year (time from vernal equinox to vernal equinox) and the length of the calendar year.","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"(Image: ) (Image: )","category":"page"},{"location":"Milankovitch/#Millennial-Timescales-(50,000-BCE-30,000-CE)","page":"Milankovitch Cycles","title":"Millennial Timescales (50,000 BCE - 30,000 CE)","text":"","category":"section"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"On longer timescales, precession causes substantial shifts in the timing of the vernal equinox within the Gregorian calendar year.","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"using Insolation\nusing Roots\ninclude(\"find_equinox_perihelion_dates.jl\")\n\nod = OrbitalDataSplines()\nyears = -50e3:100:30e3 \ndays_eq = zeros(length(years)) \n\n# Calculate vernal equinox date over 80,000 years\nfor (i,year) in enumerate(years) \n    f = (x -> zdiff(x, year, od)) \n    days_eq[i] = find_zeros(f,-100,100)[1] \nend \n\nplot((years / 1000), days_eq, legend=false, dpi=250, lw=2) \nxlabel!(\"Time (kyr before present)\") \nylabel!(\"Day in March\") \ntitle!(\"Date of Vernal Equinox Over 80 kyr\") \nsavefig(\"equinox_dates_long.png\") \nnothing # hide","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"(Image: )","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"Paleoclimate Applications: The vernal equinox date according to the Gregorian calendar still shifts substantially over millennia because even the Gregorian calendar does not precisely fix vernal equinox near March 21. For meaningful paleoclimate comparisons, scientists often reference the day of year relative to the vernal equinox (seasonal dating) rather than January 1 (calendar dating). It is common to define a calendar where March 21 defines vernal equinox (beginning of northern spring).","category":"page"},{"location":"Milankovitch/#Using-Milankovitch-Cycles-in-Calculations","page":"Milankovitch Cycles","title":"Using Milankovitch Cycles in Calculations","text":"","category":"section"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"To use time-varying orbital parameters in your insolation calculations:","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"using Insolation\nusing Dates\n\n# Load orbital data (do this once, it's computationally expensive)\norbital_data = OrbitalDataSplines()\n\n# Create parameter set\nparams = InsolationParameters(Float64)\n\n# Calculate for Last Glacial Maximum (20,000 years ago)\ndate = DateTime(2000, 6, 21)  # Summer solstice (relative date)\nlat = 65.0  # Arctic latitude\n\n# Modern climate (fixed parameters)\nF_modern, _, _, _ = insolation(date, lat, 0.0, params)\n\n# LGM climate (time-varying parameters)\nF_lgm, _, _, _ = insolation(\n    date, lat, 0.0, params;\n    orbital_data = orbital_data,\n    milankovitch = true\n)\n\nprintln(\"Modern summer insolation: $F_modern W/m²\")\nprintln(\"LGM summer insolation: $F_lgm W/m²\")\nprintln(\"Difference: $(F_lgm - F_modern) W/m²\")","category":"page"},{"location":"Milankovitch/","page":"Milankovitch Cycles","title":"Milankovitch Cycles","text":"This capability enables studies of ice age cycles, interglacial periods, and long-term climate evolution driven by orbital forcing.","category":"page"},{"location":"InsolationExamples/#Insolation-Examples","page":"Examples","title":"Insolation Examples","text":"","category":"section"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"This page demonstrates various use cases of Insolation.jl through visualizations and practical examples. These examples show how to calculate and visualize solar radiation patterns across different timescales and locations.","category":"page"},{"location":"InsolationExamples/#Diurnal-Cycle-of-Insolation","page":"Examples","title":"Diurnal Cycle of Insolation","text":"","category":"section"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"The diurnal cycle shows how insolation and solar zenith angle vary throughout a day at a specific location. This is useful for understanding the daily energy input and for applications such as solar power forecasting.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Pasadena in Winter: Clear diurnal cycle with peak insolation at solar noon. Solar zenith angle reaches minimum (~35°) at midday.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"using Insolation\nusing Dates\n\ninclude(\"plot_diurnal_cycle.jl\")\n\n# Load orbital data\nod = OrbitalDataSplines()\n\n# Example 1: Pasadena, California in January (mid-latitude winter)\nlat, lon = [34.15, -118.14]  # Pasadena coordinates\ndate = DateTime(2020, 01, 10)\ntimezone = +8  # Pacific Standard Time (UTC+8)\ndiurnal_cycle(lat, lon, date, od, timezone, \"Pasadena_January.png\")\nnothing # hide","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Finland in Summer: At the Arctic Circle, the sun does not set at northern summer solitice, resulting in continuous daylight and non-zero insolation for the 24-hour period. This \"midnight sun\" phenomenon is visible as the sustained insolation during night hours.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"# Example 2: Rovaniemi, Finland in June (Arctic summer - midnight sun)\nlat, lon = [66.50, 25.73]  # Rovaniemi coordinates (Arctic Circle)\ndate = DateTime(2020, 06, 20)  # Summer solstice\ntimezone = -3  # Eastern European Summer Time (UTC+3)\ndiurnal_cycle(lat, lon, date, od, timezone, \"Finland_June.png\")\nnothing # hide","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"InsolationExamples/#Latitudinal-and-Seasonal-Variations","page":"Examples","title":"Latitudinal and Seasonal Variations","text":"","category":"section"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"The following examples show how daily-averaged insolation varies with latitude and day of year, revealing Earth's seasonal cycles and the role of orbital parameters.","category":"page"},{"location":"InsolationExamples/#Modern-Climate-(J2000-Epoch)","page":"Examples","title":"Modern Climate (J2000 Epoch)","text":"","category":"section"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"import Insolation\nimport Insolation.Parameters as IP\nimport ClimaParams as CP\n\nFT = Float64\nparam_set = IP.InsolationParameters(FT)\n\ninclude(\"plot_insolation.jl\")\n\n# Get current epoch orbital parameters\nγ0 = IP.obliq_epoch(param_set)\nϖ0 = IP.lon_perihelion_epoch(param_set)\ne0 = IP.eccentricity_epoch(param_set)\nod = Insolation.OrbitalDataSplines()\n\n# Calculate daily-mean insolation across latitudes and days\ndays, lats, F0 = calc_day_lat_insolation(od, 365, 180, param_set)\ntitle = format(\"Modern Earth: γ = {:.2f}°, ϖ = {:.2f}°, e = {:.3f}\", rad2deg(γ0), rad2deg(ϖ0), e0) #hide\nplot_day_lat_insolation(days, lats, F0, \"YlOrRd\", title, \"insol_example1.png\")\nnothing # hide","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"This plot shows daily-averaged TOA insolation as a function of latitude and day of year for modern Earth (J2000 epoch). Key features:","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Solstices: Maximum insolation at high latitudes during local summer (June in NH, December in SH)\nEquinoxes: Symmetric insolation distribution around March 21 and September 21\nAnnual Mean: Right panel shows the latitudinal gradient, with maximum near the equator","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"InsolationExamples/#Effect-of-Reduced-Obliquity","page":"Examples","title":"Effect of Reduced Obliquity","text":"","category":"section"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Obliquity (axial tilt) controls the strength of seasonal cycles. Here we reduce obliquity from 23.44° to 20° to demonstrate its impact.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"# Reduce obliquity to 20.0° (from current 23.44°)\nparam_set_low_obliq = IP.InsolationParameters(FT, (; obliq_epoch = deg2rad(20.0)))\nγ1 = IP.obliq_epoch(param_set_low_obliq)\ndays, lats, F2 = calc_day_lat_insolation(od, 365, 180, param_set_low_obliq)\n\ntitle = format(\"Low Obliquity: γ = {:.2f}°, ϖ = {:.2f}°, e = {:.3f}\", rad2deg(γ1), rad2deg(ϖ0), e0) # hide\nplot_day_lat_insolation(days,lats,F2,\"YlOrRd\",  title, \"insol_example2a.png\")\ntitle = format(\"Difference: γ = {:.2f}° minus γ = {:.2f}°\", rad2deg(γ1), rad2deg(γ0)) # hide\nplot_day_lat_insolation(days, lats, F2-F0, \"PRGn\", title, \"insol_example2b.png\")\nnothing # hide","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Absolute Insolation (top): With reduced obliquity, polar regions receive less summer insolation, and the tropical regions receive slightly more year-round.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Difference Plot (bottom): Shows that reducing obliquity:","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Decreases high-latitude summer insolation (blue regions)\nIncreases tropical insolation slightly (purple regions)\nResults in weaker seasonal cycles overall","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"This demonstrates that lower obliquity leads to milder seasons - important for understanding climates on other planets or Earth's past climates.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"InsolationExamples/#Extreme-Obliquity-(Uranus-like-Configuration)","page":"Examples","title":"Extreme Obliquity (Uranus-like Configuration)","text":"","category":"section"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Uranus has an extreme axial tilt of 97.86°, essentially rotating \"on its side.\" This creates dramatically different seasonal patterns.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"# Set obliquity to 97.86° (Uranus's axial tilt)\nparam_set_uranus = IP.InsolationParameters(FT, (;obliq_epoch = deg2rad(97.86)))\nγ4 = IP.obliq_epoch(param_set_uranus)\ndays, lats, F5 = calc_day_lat_insolation(od, 365, 180, param_set_uranus)\n\ntitle = format(\"Uranus Obliq.: γ = {:.2f}°, ϖ = {:.2f}°, e = {:.3f}\", rad2deg(γ4), rad2deg(ϖ0), e0) # hide\nplot_day_lat_insolation(days,lats,F5,\"YlOrRd\", title, \"insol_example3a.png\")\ntitle = format(\"Difference: γ = {:.2f}° minus γ = {:.2f}°\", rad2deg(γ4), rad2deg(γ0)) # hide\nplot_day_lat_insolation(days, lats, F5-F0, \"PRGn\", title, \"insol_example3b.png\")\nnothing # hide","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Absolute Insolation (top): With extreme obliquity, the insolation pattern is dramatically different:","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Polar regions receive intense summer insolation, exceeding tropical values\nEquatorial regions have two insolation peaks per year\nExtreme seasons with long polar day/night periods","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Difference Plot (bottom): Compared to Earth's current configuration:","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Polar summers receive much more insolation (>500 W/m² increase)\nAnnual-mean distribution shifts toward maxima at the poles","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"This extreme case illustrates how orbital parameters fundamentally shape a planet's climate. Such configurations help us understand exotic exoplanets and the range of possible planetary climates.","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"InsolationExamples/#Summary","page":"Examples","title":"Summary","text":"","category":"section"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"These examples demonstrate that Insolation.jl can:","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"Calculate diurnal cycles for any location and date\nVisualize latitudinal and seasonal patterns\nExplore sensitivity to orbital parameters\nModel both Earth-like and exotic planetary configurations","category":"page"},{"location":"InsolationExamples/","page":"Examples","title":"Examples","text":"For paleoclimate applications with time-varying orbital parameters, see Milankovitch Cycles.","category":"page"},{"location":"library/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"library/#Insolation.Insolation","page":"API Reference","title":"Insolation.Insolation","text":"Insolation\n\nA Julia package to calculate top-of-atmosphere (TOA) insolation (incoming solar radiation) based on Earth's (or another planetary  body's) orbital parameters.\n\nThe calculations follow fundamental principles of celestial mechanics and solar geometry, as described in \"Physics of Earth's Climate\"  by Tapio Schneider and Lenka Novak.\n\nThe package provides functions to:\n\nCalculate instantaneous insolation for a specific time and location.\nCalculate diurnally averaged insolation.\nFetch and use orbital parameters (eccentricity, obliquity, and longitude of perihelion) from Laskar et al. (2004)  to compute insolation for paleoclimate studies.\n\n\n\n\n\n","category":"module"},{"location":"library/","page":"API Reference","title":"API Reference","text":"Complete documentation of the public API for Insolation.jl.","category":"page"},{"location":"library/#Overview","page":"API Reference","title":"Overview","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"The package provides functions organized into three main categories:","category":"page"},{"location":"library/","page":"API Reference","title":"API Reference","text":"Parameter Management: Create and manage physical/orbital parameters\nSolar Geometry: Calculate solar geometry (zenith angle, azimuth angle, distance)\nInsolation Calculations: Compute top-of-atmosphere solar radiation","category":"page"},{"location":"library/#Parameters","page":"API Reference","title":"Parameters","text":"","category":"section"},{"location":"library/#Parameter-Structures","page":"API Reference","title":"Parameter Structures","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"InsolationParameters{FT} - The main parameter struct containing physical and orbital constants needed for insolation calculations. See the source code or API documentation for all fields.","category":"page"},{"location":"library/#Parameter-Creation","page":"API Reference","title":"Parameter Creation","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"The CreateParametersExt extension provides convenient constructors when ClimaParams.jl is loaded. See the Extensions section for details.","category":"page"},{"location":"library/","page":"API Reference","title":"API Reference","text":"When ClimaParams.jl is available, you can create parameters using:","category":"page"},{"location":"library/","page":"API Reference","title":"API Reference","text":"# With ClimaParams.jl loaded\nusing Insolation\nparams = InsolationParameters(Float64)\n\n# With custom overrides\nparams = InsolationParameters(Float64, (; tot_solar_irrad = 1365.0))","category":"page"},{"location":"library/","page":"API Reference","title":"API Reference","text":"Without ClimaParams.jl, create parameters directly:","category":"page"},{"location":"library/","page":"API Reference","title":"API Reference","text":"using Insolation.Parameters\nparams = InsolationParameters{Float64}(\n    year_anom = 365.259636 * 86400.0,\n    day = 86400.0,\n    orbit_semimaj = 1.496e11,\n    eccentricity_epoch = 0.0167,\n    obliq_epoch = deg2rad(23.44),\n    lon_perihelion_epoch = deg2rad(282.95),\n    tot_solar_irrad = 1362.0,\n    epoch = DateTime(2000, 1, 1, 12, 0, 0),\n    mean_anom_epoch = deg2rad(357.5291)\n)","category":"page"},{"location":"library/#Orbital-Parameters","page":"API Reference","title":"Orbital Parameters","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"Functions for managing time-varying orbital parameters used in paleoclimate studies.","category":"page"},{"location":"library/#Insolation.orbital_params","page":"API Reference","title":"Insolation.orbital_params","text":"orbital_params(od::OrbitalDataSplines, dt::FT) where {FT <: Real}\n\nInterpolates time-varying orbital parameters using Milankovitch cycles.\n\nInterpolates orbital parameters from the Laskar et al. (2004) dataset for paleoclimate studies. The parameters vary over geological timescales.\n\nArguments\n\nod::OrbitalDataSplines: The struct containing orbital parameter splines.\ndt::FT: The time for interpolation [Years since J2000 epoch].\n\nReturns\n\n(ϖ, γ, e): A tuple containing:\nϖ: Longitude of perihelion [radians]\nγ: Obliquity (axial tilt) [radians]\ne: Orbital eccentricity [unitless]\n\n\n\n\n\norbital_params(param_set::AIP)\n\nReturns fixed orbital parameters at epoch.\n\nUses the constant orbital parameter values at the reference epoch (typically J2000) stored in the parameter set. Suitable for modern climate simulations where orbital variations are negligible.\n\nArguments\n\nparam_set::AIP: Parameter struct containing epoch orbital parameters\n\nReturns\n\n(ϖ, γ, e): A tuple containing:\nϖ: Longitude of perihelion at epoch [radians]\nγ: Obliquity (axial tilt) at epoch [radians]\ne: Orbital eccentricity at epoch [unitless]\n\n\n\n\n\n","category":"function"},{"location":"library/#Insolation.OrbitalDataSplines","page":"API Reference","title":"Insolation.OrbitalDataSplines","text":"OrbitalDataSplines\n\nA container struct that holds cubic spline interpolators for Earth's orbital parameters, based on the Laskar 2004 dataset.\n\nThe time series of orbital parameters are lazily downloaded from the  orbital_parameters_dataset_path(artifact_dir) path where artifact_dir is  the path and filename to save the artifacts toml file.\n\nThe splines are functions of time (in years since J2000 epoch).\n\nGPU Support\n\nThis struct is GPU-compatible via Adapt.jl. To transfer to GPU memory:\n\nusing CUDA, Adapt\ncpu_od = OrbitalDataSplines()  # Create on CPU\ngpu_od = adapt(CuArray, cpu_od)  # Transfer to GPU\n\n\n\n\n\n","category":"type"},{"location":"library/#Insolation-Calculations","page":"API Reference","title":"Insolation Calculations","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"Main functions for computing top-of-atmosphere solar radiation.","category":"page"},{"location":"library/#Instantaneous-Insolation","page":"API Reference","title":"Instantaneous Insolation","text":"","category":"section"},{"location":"library/#Insolation.insolation","page":"API Reference","title":"Insolation.insolation","text":"insolation(θ::FT, d::FT, param_set::IP.AIP) where {FT <: Real}\n\nCalculates top-of-atmosphere (TOA) insolation and cosine of solar zenith angle.\n\nImplements F = S cos(theta) where S is the solar flux at the given planet-star distance. Insolation is set to 0 at night (when cos(theta)  0).\n\nArguments\n\nθ::FT: Solar zenith angle [radians]\nd::FT: Planet-star distance [m]\nparam_set::IP.AIP: Parameter struct\n\nReturns\n\nF: TOA insolation [W m⁻²]\nS: Solar flux at the given planet-star distance [W m⁻²]\nμ: Cosine of solar zenith angle [unitless], clamped to [0, 1]\n\n\n\n\n\ninsolation(\n    date::DateTime,\n    latitude::FT,\n    longitude::FT,\n    param_set::IP.AIP,\n    orbital_data::Union{OrbitalDataSplines, Nothing} = nothing;\n    milankovitch::Bool = false,\n    solar_variability::Bool = false,\n    eot_correction::Bool = true,\n) where {FT <: Real}\n\nCalculates instantaneous TOA insolation with optional long-term variations in Earth's orbital parameters (Milankovitch cycles) and solar luminosity.\n\nArguments\n\ndate::DateTime: Current date and time\nlatitude::FT: Latitude [degrees]\nlongitude::FT: Longitude [degrees]\nparam_set::IP.AIP: Parameter struct\norbital_data::Union{OrbitalDataSplines, Nothing}: (default nothing) Orbital parameter splines. Required when milankovitch=true for GPU compatibility.\nmilankovitch::Bool: (default false) Use time-varying orbital parameters (Milankovitch cycles)\nsolar_variability::Bool: (default false) Use time-varying solar luminosity\neot_correction::Bool: (default true) Apply equation of time correction\n\nReturns\n\nF: TOA insolation [W m⁻²]\nS: Solar flux [W m⁻²]\nμ: Cosine of solar zenith angle [unitless]\nζ: Solar azimuth angle [radians], 0 = due East, increasing counterclockwise\n\nExamples\n\n# Modern climate (fixed epoch parameters)\nF, S, μ, ζ = insolation(date, lat, lon, param_set)\n\n# Paleoclimate with Milankovitch cycles \nod = OrbitalDataSplines()  # Load once\nF, S, μ, ζ = insolation(date, lat, lon, param_set, od; milankovitch=true)\n\n# Without equation of time correction\nF, S, μ, ζ = insolation(date, lat, lon, param_set; eot_correction=false)\n\nGPU Usage\n\nFor GPU execution, create orbital data on CPU and transfer to GPU using Adapt.jl:\n\nusing CUDA, Adapt\ncpu_od = OrbitalDataSplines()  # Create on CPU\ngpu_od = adapt(CuArray, cpu_od)  # Transfer to GPU\n# In GPU kernel:\nF, S, μ, ζ = insolation(date, lat, lon, param_set, gpu_od; milankovitch=true)\n\n\n\n\n\n","category":"function"},{"location":"library/#Daily-Averaged-Insolation","page":"API Reference","title":"Daily-Averaged Insolation","text":"","category":"section"},{"location":"library/#Insolation.daily_insolation","page":"API Reference","title":"Insolation.daily_insolation","text":"daily_insolation(\n    date::DateTime,\n    latitude::FT,\n    param_set::IP.AIP,\n    orbital_data::Union{OrbitalDataSplines, Nothing} = nothing;\n    milankovitch::Bool = false,\n    solar_variability::Bool = false,\n) where {FT <: Real}\n\nCalculates diurnally averaged TOA insolation with optional long-term variations in orbital parameters (Milankovitch cycles) and solar luminosity. The insolation is  averaged over a full day.\n\nArguments\n\ndate::DateTime: Current date\nlatitude::FT: Latitude [degrees]\nparam_set::IP.AIP: Parameter struct\norbital_data::Union{OrbitalDataSplines, Nothing}: (default nothing) Orbital parameter splines. Required when milankovitch=true for GPU compatibility.\nmilankovitch::Bool: (default false) Use time-varying orbital parameters (Milankovitch cycles)\nsolar_variability::Bool: (default false) Use time-varying solar luminosity (placeholder for future)\n\nReturns\n\nF: Daily averaged TOA insolation [W m⁻²]\nS: Solar flux [W m⁻²]\nμ: Daily averaged cosine of solar zenith angle [unitless]\n\nExamples\n\n# Modern climate (fixed epoch parameters)\nF, S, μ = daily_insolation(date, lat, param_set)\n\n# Paleoclimate with Milankovitch cycles\nod = OrbitalDataSplines()  # Load once \nF, S, μ = daily_insolation(date, lat, param_set, od; milankovitch=true)\n\nGPU Usage\n\nFor GPU execution, create orbital data on CPU and transfer to GPU using Adapt.jl:\n\nusing CUDA, Adapt\ncpu_od = OrbitalDataSplines()  # Create on CPU\ngpu_od = adapt(CuArray, cpu_od)  # Transfer to GPU\n# In GPU kernel:\nF, S, μ = daily_insolation(date, lat, param_set, gpu_od; milankovitch=true)\n\n\n\n\n\n","category":"function"},{"location":"library/#Solar-Flux","page":"API Reference","title":"Solar Flux","text":"","category":"section"},{"location":"library/#Insolation.solar_flux","page":"API Reference","title":"Insolation.solar_flux","text":"solar_flux(d::FT, param_set::IP.AIP) where {FT <: Real}\n\nCalculates the solar radiative energy flux at the top of the atmosphere (TOA) based on the planet-star distance and the inverse square law.\n\nArguments\n\nd::FT: Planet-star distance [m]\nparam_set::IP.AIP: Struct containing tot_solar_irrad [W m⁻²] and orbit_semimaj [m]\n\n\n\n\n\n","category":"function"},{"location":"library/#Solar-Geometry","page":"API Reference","title":"Solar Geometry","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"Functions for calculating solar geometry (distance and solar position in sky). These are typically used internally but can be called directly for specialized applications.","category":"page"},{"location":"library/#Instantaneous-Geometry","page":"API Reference","title":"Instantaneous Geometry","text":"","category":"section"},{"location":"library/#Insolation.solar_geometry","page":"API Reference","title":"Insolation.solar_geometry","text":"solar_geometry(\n    date::DateTime,\n    latitude::FT,\n    longitude::FT,\n    (ϖ, γ, e)::Tuple{FT, FT, FT},\n    param_set::AIP;\n    eot_correction::Bool = true,\n) where {FT}\n\nCalculates planet-star distance, solar zenith angle, and azimuthal angle.\n\nThis is a high-level function that combines all necessary astronomical calculations to determine the planet's position and distance from the star at a specific time and location.\n\nArguments\n\ndate::DateTime: Current date and time\nlatitude::FT: Latitude [degrees]\nlongitude::FT: Longitude [degrees]\n(ϖ, γ, e)::Tuple{FT, FT, FT}: Orbital parameters tuple containing:\nϖ: Longitude of perihelion [radians]\nγ: Obliquity (axial tilt) [radians]\ne: Orbital eccentricity [unitless]\nparam_set::AIP: Parameter struct\neot_correction::Bool: (default true) Apply equation of time correction\n\nReturns\n\nd: Planet-Sun distance [m]\nθ: Solar zenith angle [radians]\nζ: Solar azimuth angle [radians], 0 = due East, increasing CCW\n\n\n\n\n\n","category":"function"},{"location":"library/#Daily-Averaged-Geometry","page":"API Reference","title":"Daily-Averaged Geometry","text":"","category":"section"},{"location":"library/#Insolation.daily_distance_zenith_angle","page":"API Reference","title":"Insolation.daily_distance_zenith_angle","text":"daily_distance_zenith_angle(\n    date::DateTime,\n    latitude::FT,\n    (ϖ, γ, e)::Tuple{FT, FT, FT},\n    param_set::IP.AIP,\n) where {FT <: Real}\n\nCalculates the effective zenith angle for diurnally averaged insolation and  planet-star distance.\n\nReturns the effective zenith angle corresponding to the diurnally averaged insolation (averaging cos(zenith angle) over 24 hours) and  the planet-star distance for a given date and latitude.\n\nArguments\n\ndate::DateTime: Current date\nlatitude::FT: Latitude [degrees]\n(ϖ, γ, e)::Tuple{FT, FT, FT}: Orbital parameters tuple containing:\nϖ: Longitude of perihelion [radians]\nγ: Obliquity (axial tilt) [radians]\ne: Orbital eccentricity [unitless]\nparam_set::IP.AIP: Parameter struct\n\nReturns\n\ndaily_θ: Effective solar zenith angle [radians]\nd: Planet-star distance [m]\n\n\n\n\n\n","category":"function"},{"location":"library/#Internal-Functions","page":"API Reference","title":"Internal Functions","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"The following functions are typically used internally but are documented for advanced users and developers who need lower-level access to the calculations.","category":"page"},{"location":"library/#Temporal-and-Angular-Calculations","page":"API Reference","title":"Temporal and Angular Calculations","text":"","category":"section"},{"location":"library/#Insolation.mean_anomaly","page":"API Reference","title":"Insolation.mean_anomaly","text":"mean_anomaly(Δt_years::FT, param_set::IP.AIP) where {FT}\n\nCalculates the mean anomaly at a given time since epoch.\n\nThe mean anomaly is the angle the planet would have traveled from perihelion if it moved in a circular orbit at constant angular velocity.\n\nArguments\n\nΔt_years::FT: Time since epoch [years]\nparam_set::IP.AIP: Parameter struct containing mean_anom_epoch\n\nReturns\n\nMA: Mean anomaly [radians]\n\n\n\n\n\n","category":"function"},{"location":"library/#Insolation.true_anomaly","page":"API Reference","title":"Insolation.true_anomaly","text":"true_anomaly(MA::FT, e::FT) where {FT <: Real}\n\nCalculates the true anomaly from the mean anomaly.\n\nThe true anomaly is the actual angular distance of the planet from perihelion along its orbital path. This function uses a series expansion accurate to O(e⁴) where e is the eccentricity (see Fitzpatrick (2012), Appendix A.10).\n\nArguments\n\nMA::FT: Mean anomaly [radians]\ne::FT: Orbital eccentricity [unitless]\n\nReturns\n\nTA: True anomaly [radians]\n\n\n\n\n\n","category":"function"},{"location":"library/#Insolation.solar_longitude","page":"API Reference","title":"Insolation.solar_longitude","text":"solar_longitude(TA::FT, ϖ::FT) where {FT <: Real}\n\nCalculates the solar longitude (ecliptic longitude of the Sun).\n\nThe solar longitude is the angular distance of the planet along its orbital  path, measured from vernal equinox. It is the sum of the true anomaly  (angle from perihelion) and the longitude of perihelion.\n\nArguments\n\nTA::FT: True anomaly [radians]\nϖ::FT: Longitude of perihelion [radians]\n\nReturns\n\nSL: Solar longitude [radians]\n\n\n\n\n\n","category":"function"},{"location":"library/#Insolation.hour_angle","page":"API Reference","title":"Insolation.hour_angle","text":"hour_angle(\n    date::DateTime,\n    λ::FT,\n    MA::FT,\n    (ϖ, γ, e)::Tuple{FT, FT, FT};\n    eot_correction::Bool = true,\n) where {FT}\n\nCalculates the hour angle at a given time and longitude.\n\nThe hour angle is zero at local solar noon and increases with time. Optionally applies the equation of time correction to account for  the difference between apparent and mean solar time.\n\nArguments\n\ndate::DateTime: Current date and time\nλ::FT: Longitude [radians]\nMA::FT: Mean anomaly [radians]\n(ϖ, γ, e)::Tuple{FT, FT, FT}: Orbital parameters tuple containing:\nϖ: Longitude of perihelion [radians]\nγ: Obliquity (axial tilt) [radians]\ne: Orbital eccentricity [unitless]\neot_correction::Bool: (default true) Apply equation of time correction\n\nReturns\n\nη: Hour angle [radians]\n\n\n\n\n\n","category":"function"},{"location":"library/#Insolation.equation_of_time","page":"API Reference","title":"Insolation.equation_of_time","text":"equation_of_time(MA::FT, (ϖ, γ, e)::Tuple{FT, FT, FT}) where {FT <: Real}\n\nCalculates the equation of time correction for the hour angle.\n\nThe equation of time accounts for the difference between apparent solar time  (based on the actual Sun's position in the sky) and mean solar time (based on  a fictitious mean Sun moving at constant speed). This difference arises from  two effects:\n\nEarth's elliptical orbit (eccentricity e)\nEarth's axial tilt (obliquity γ)\n\nArguments\n\nMA::FT: Mean anomaly [radians]\n(ϖ, γ, e)::Tuple{FT, FT, FT}: Orbital parameters tuple containing:\nϖ: Longitude of perihelion [radians]\nγ: Obliquity (axial tilt) [radians]\ne: Orbital eccentricity [unitless]\n\nReturns\n\nΔη: Hour angle correction [radians]\n\n\n\n\n\n","category":"function"},{"location":"library/#Distance-and-Utility-Functions","page":"API Reference","title":"Distance and Utility Functions","text":"","category":"section"},{"location":"library/#Insolation.planet_star_distance","page":"API Reference","title":"Insolation.planet_star_distance","text":"planet_star_distance(TA::FT, e::FT, param_set::IP.AIP) where {FT <: Real}\n\nCalculates the distance between planet (Earth) and star (Sun) at a given  true anomaly.\n\nThe distance varies due to the planet's elliptical orbit, being shortest at perihelion and longest at aphelion. The calculation uses the orbit equation for an ellipse.\n\nArguments\n\nTA::FT: True anomaly [radians]\ne::FT: Orbital eccentricity [unitless]\nparam_set::IP.AIP: Parameter struct containing orbit_semimaj\n\nReturns\n\nd: Planet-star distance [m]\n\n\n\n\n\n","category":"function"},{"location":"library/#Insolation.years_since_epoch","page":"API Reference","title":"Insolation.years_since_epoch","text":"years_since_epoch(\n    param_set::IP.InsolationParameters{FT},\n    date::DateTime,\n) where {FT}\n\nCalculates the time elapsed since epoch (typically J2000) in anomalistic  years (the time from perihelion to perihelion).\n\nConverts the time difference between two dates from Julian days to anomalistic years, which is the natural time unit for orbital calculations.\n\nArguments\n\nparam_set::IP.InsolationParameters{FT}: Parameter struct\ndate::DateTime: Current date and time\n\nReturns\n\nΔt_years: Time since epoch [anomalistic years]\n\n\n\n\n\n","category":"function"},{"location":"library/#Insolation.distance_declination_mean_anomaly","page":"API Reference","title":"Insolation.distance_declination_mean_anomaly","text":"distance_declination_mean_anomaly(\n    Δt_years::FT,\n    (ϖ, γ, e)::Tuple{FT, FT, FT},\n    param_set::IP.AIP,\n) where {FT}\n\nComputes planet-star distance, solar declination angle, and mean anomaly.\n\nThis function calculates key astronomical parameters from orbital elements. The declination determines the subsolar latitude, while the planet-star distance varies due to orbital eccentricity. The mean anomaly is returned for use in hour angle calculations.\n\nArguments\n\nΔt_years::FT: Time since epoch [anomalistic years]\n(ϖ, γ, e)::Tuple{FT, FT, FT}: Orbital parameters tuple containing:\nϖ: Longitude of perihelion [radians]\nγ: Obliquity (axial tilt) [radians]\ne: Orbital eccentricity [unitless]\nparam_set::IP.AIP: Parameter struct\n\nReturns\n\nd: Planet-star distance [m]\nδ: Solar declination angle [radians]\nMA: Mean anomaly [radians]\n\n\n\n\n\n","category":"function"},{"location":"library/#Type-Aliases","page":"API Reference","title":"Type Aliases","text":"","category":"section"},{"location":"library/#Insolation.Parameters.AbstractInsolationParams","page":"API Reference","title":"Insolation.Parameters.AbstractInsolationParams","text":"AbstractInsolationParams\n\nAbstract base type for insolation parameter sets.\n\nAll parameter structs used in Insolation.jl should inherit from this type. The main concrete implementation is InsolationParameters.\n\nThis type hierarchy allows for flexible parameter management and enables package extensions to provide alternative parameter implementations while maintaining API compatibility.\n\n\n\n\n\n","category":"type"},{"location":"library/#Extensions","page":"API Reference","title":"Extensions","text":"","category":"section"},{"location":"library/#CreateParametersExt","page":"API Reference","title":"CreateParametersExt","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"The CreateParametersExt extension provides integration with ClimaParams.jl. When both Insolation.jl and ClimaParams.jl are loaded, this extension enables convenient parameter creation from TOML configuration files, automatically mapping ClimaParams names to Insolation.jl field names.","category":"page"},{"location":"library/","page":"API Reference","title":"API Reference","text":"See the extension source code in ext/CreateParametersExt.jl for implementation details.","category":"page"},{"location":"library/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"library/","page":"API Reference","title":"API Reference","text":"Pages = [\"library.md\"]","category":"page"},{"location":"GettingStarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"This guide will help you get started with Insolation.jl, covering installation, basic usage, and common workflows.","category":"page"},{"location":"GettingStarted/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Insolation.jl is a registered Julia package. Install it using Julia's package manager:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"Insolation\")","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"For the latest development version from GitHub:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Pkg.add(url=\"https://github.com/CliMA/Insolation.jl\")","category":"page"},{"location":"GettingStarted/#Loading-the-Package","page":"Getting Started","title":"Loading the Package","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"using Insolation\nusing Dates  # For DateTime objects","category":"page"},{"location":"GettingStarted/#Basic-Concepts","page":"Getting Started","title":"Basic Concepts","text":"","category":"section"},{"location":"GettingStarted/#Coordinate-System","page":"Getting Started","title":"Coordinate System","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Latitude: Degrees North (positive) or South (negative), range [-90, 90]\nLongitude: Degrees East (positive) or West (negative), range [-180, 180]\nTime: Julia DateTime objects (UTC)","category":"page"},{"location":"GettingStarted/#Parameters","page":"Getting Started","title":"Parameters","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Insolation calculations require a parameter set containing orbital and physical constants. Create one using:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"# Default Earth parameters (requires ClimaParams.jl)\nusing ClimaParams\nparams = InsolationParameters(Float64)\n\n# Without ClimaParams, specify all parameters manually:\nparams = InsolationParameters{Float64}(\n    year_anom = 365.259636 * 86400.0,  # Anomalistic year [s]\n    day = 86400.0,                      # Day length [s]\n    orbit_semimaj = 1.496e11,           # Semi-major axis [m]\n    eccentricity_epoch = 0.0167,        # Eccentricity\n    obliq_epoch = deg2rad(23.44),       # Obliquity [rad]\n    lon_perihelion_epoch = deg2rad(282.95),  # Longitude of perihelion [rad]\n    tot_solar_irrad = 1362.0,           # Solar irradiance at 1 AU [W/m²]\n    epoch = DateTime(2000, 1, 1, 11, 58, 56, 816),  # J2000 epoch\n    mean_anom_epoch = deg2rad(357.5291)  # Mean anomaly at epoch [rad]\n)","category":"page"},{"location":"GettingStarted/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"GettingStarted/#Instantaneous-Insolation","page":"Getting Started","title":"Instantaneous Insolation","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Calculate insolation at a specific time and location:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"using Insolation\nusing Dates\nusing ClimaParams\n\n# Setup\nparams = InsolationParameters(Float64)\ndate = DateTime(2024, 6, 21, 18, 0, 0)  # Summer solstice, 18h UTC\nlat = 40.0    # Boulder, Colorado (degrees North)\nlon = -105.0  # (degrees East)\n\n# Calculate insolation and solar geometry\nF, S, μ, ζ = insolation(date, lat, lon, params)\n\nprintln(\"TOA Insolation: $F W/m²\")\nprintln(\"Solar flux: $S W/m²\")\nprintln(\"Cosine of zenith angle: $μ\")\nprintln(\"Solar zenith angle: $(rad2deg(acos(μ)))°\")\nprintln(\"Solar azimuth angle: $(rad2deg(ζ))°\")","category":"page"},{"location":"GettingStarted/#Daily-Averaged-Insolation","page":"Getting Started","title":"Daily-Averaged Insolation","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Calculate diurnally averaged insolation (useful for climate models):","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"# Daily average only depends on date and latitude\ndate = DateTime(2024, 6, 21)\nlat = 40.0\n\nF_daily, S_daily, μ_daily = daily_insolation(date, lat, params)\n\nprintln(\"Daily-averaged TOA Insolation: $F_daily W/m²\")\nprintln(\"Daily-averaged cosine of zenith angle: $μ_daily\")","category":"page"},{"location":"GettingStarted/#Computing-Solar-Position","page":"Getting Started","title":"Computing Solar Position","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"For applications that only need solar geometry without insolation:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"# Get orbital parameters\norb_params = orbital_params(params)\n\n# Calculate solar geometry\ndistance, zenith_angle, azimuth = solar_geometry(\n    date, lat, lon, orb_params, params\n)\n\nprintln(\"Sun-Earth distance: $(distance / 1.496e11) AU\")\nprintln(\"Solar zenith angle: $(rad2deg(zenith_angle))°\")\nprintln(\"Solar azimuth angle: $(rad2deg(azimuth))°\")","category":"page"},{"location":"GettingStarted/#Working-with-Milankovitch-Cycles","page":"Getting Started","title":"Working with Milankovitch Cycles","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"For paleoclimate applications, use time-varying orbital parameters:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"# Load orbital parameter time series (covers -50 to +20 million years around present)\norbital_data = OrbitalDataSplines()\n\n# Calculate for 20,000 years ago (Last Glacial Maximum)\ndate = DateTime(2000, 1, 1)  # Reference date (day of year matters)\nparams = InsolationParameters(Float64)\n\n# Use Milankovitch cycles\nF, S, μ, ζ = insolation(\n    date, lat, lon, params,\n    orbital_data;\n    milankovitch = true\n)\n\n# Get orbital parameters at specific time\nyears_since_epoch = -20000.0  # 20 kyr ago\nϖ, γ, e = orbital_params(orbital_data, years_since_epoch)\nprintln(\"Obliquity 20 kyr ago: $(rad2deg(γ))°\")\nprintln(\"Eccentricity 20 kyr ago: $e\")","category":"page"},{"location":"GettingStarted/#Advanced-Options","page":"Getting Started","title":"Advanced Options","text":"","category":"section"},{"location":"GettingStarted/#GPU-Usage","page":"Getting Started","title":"GPU Usage","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Insolation.jl supports GPU computation through Adapt.jl. This is useful for large-scale climate simulations.","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"using CUDA, Adapt, Insolation, ClimaParams\n\n# Create parameters and orbital data on CPU\nparams = InsolationParameters(Float32)\ncpu_od = OrbitalDataSplines()\n\n# Transfer orbital data to GPU\ngpu_od = adapt(CuArray, cpu_od)\n\n# Use in GPU kernels (positional argument required for GPU compatibility)\nF, S, μ, ζ = insolation(date, lat, lon, params, gpu_od; milankovitch=true)","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Design Note: The constructor creates data on CPU; users explicitly transfer to GPU using adapt(). This gives explicit control over data placement and follows Julia GPU ecosystem conventions.","category":"page"},{"location":"GettingStarted/#Equation-of-Time-Correction","page":"Getting Started","title":"Equation of Time Correction","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Control whether to apply the equation of time correction:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"# Without equation of time correction (simpler, less accurate; for testing against codes not using EoT corrections)\ndate = DateTime(2000, 1, 1, 13, 0, 0)\nlat = 40.0\nlon = 15.0\n\nF, S, μ, ζ = insolation(date, lat, lon, params; eot_correction=false)","category":"page"},{"location":"GettingStarted/#Custom-Orbital-Parameters","page":"Getting Started","title":"Custom Orbital Parameters","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Override specific parameters for sensitivity studies:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"# Increase obliquity by 5 degrees\nparams_high_obliq = InsolationParameters(Float64, (;\n    obliq_epoch = deg2rad(23.44 + 5.0)\n))\n\nF_modified, _, _, _ = insolation(date, lat, lon, params_high_obliq)","category":"page"},{"location":"GettingStarted/#Type-Flexibility","page":"Getting Started","title":"Type Flexibility","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Use Float32 for reduced memory usage (useful for large-scale simulations):","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"params_f32 = InsolationParameters(Float32)\nlat_f32 = Float32(lat)\nlon_f32 = Float32(lon)\n\nF, S, μ, ζ = insolation(date, lat_f32, lon_f32, params_f32)","category":"page"},{"location":"GettingStarted/#Common-Patterns","page":"Getting Started","title":"Common Patterns","text":"","category":"section"},{"location":"GettingStarted/#Loop-Over-Time-and-Space","page":"Getting Started","title":"Loop Over Time and Space","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"using Insolation\nusing Dates\nusing ClimaParams\n\nparams = InsolationParameters(Float64)\n\n# Create arrays\nlatitudes = -90.0:10.0:90.0\nlongitudes = -180.0:15.0:180.0\ndates = DateTime(2024, 1, 1):Day(1):DateTime(2024, 12, 31)\n\n# Allocate output\ninsolation_array = zeros(length(latitudes), length(longitudes), length(dates))\n\n# Calculate\nfor (k, date) in enumerate(dates)\n    for (j, lon) in enumerate(longitudes)\n        for (i, lat) in enumerate(latitudes)\n            F, _, _, _ = insolation(date, lat, lon, params)\n            insolation_array[i, j, k] = F\n        end\n    end\nend","category":"page"},{"location":"GettingStarted/#Seasonal-Cycle-at-a-Location","page":"Getting Started","title":"Seasonal Cycle at a Location","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"using Insolation\nusing Dates\nusing ClimaParams\nusing Plots\n\nparams = InsolationParameters(Float64)\nlat = 40.0\nlon = -105.0\n\n# Sample every day for a year\ndates = DateTime(2024, 1, 1):Day(1):DateTime(2024, 12, 31)\ndaily_insol = [daily_insolation(d, lat, params)[1] for d in dates]\n\n# Plot\nplot(dates, daily_insol, \n     xlabel=\"Date\", \n     ylabel=\"Daily-mean TOA Insolation [W/m²]\",\n     title=\"Seasonal Cycle at $(lat)°N, $(lon)°E\",\n     legend=false)","category":"page"},{"location":"GettingStarted/#Next-Steps","page":"Getting Started","title":"Next Steps","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"See Insolation Examples for visualization and more complex use cases\nLearn about Milankovitch Cycles for paleoclimate applications  \nCheck the API Reference for complete function documentation","category":"page"},{"location":"#Insolation.jl","page":"Home","title":"Insolation.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Insolation.jl is a Julia package for calculating solar radiation and solar geometry for climate science and Earth system modeling applications. It provides efficient and accurate computations of solar zenith angle, azimuth angle, and incoming solar radiation (insolation) at the top of atmosphere.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package computes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Solar Geometry: Zenith angle, azimuth angle, and planet-star distance for any location and time\nInsolation: Instantaneous and daily-averaged incoming solar radiation\nOrbital Parameters: Time-varying orbital elements using the Laskar et al. (2004) solution for paleoclimate applications","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Planetary Flexibility: Works for Earth by default, but applicable to any planetary body with configurable parameters\nMilankovitch Cycles: Includes time-varying orbital parameters for paleoclimate studies spanning from -50 to +20 Myr\nType-Generic: Supports different floating-point types (Float32, Float64) for performance optimization\nGPU-Compatible: Designed with GPU execution in mind, avoiding dynamic allocations in computational kernels\nCliMA Integration: Built for use with ClimaAtmos.jl, RRTMGP.jl, and other CliMA packages","category":"page"},{"location":"#Package-Structure","page":"Home","title":"Package Structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is organized into several modules:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parameters.jl: Defines InsolationParameters struct containing physical and orbital parameters\nSolarGeometry.jl: Calculates solar geometry (zenith angle, azimuth, declination, distance)\nInsolationCalc.jl: Computes top-of-atmosphere insolation from solar geometry\nCreateParametersExt.jl: Extension for integration with ClimaParams.jl","category":"page"},{"location":"#Mathematical-Background","page":"Home","title":"Mathematical Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The calculations follow fundamental principles of celestial mechanics and solar geometry, as described in Physics of Earth's Climate by Tapio Schneider and Lenka Novak. See the Mathematical Background page for detailed mathematical formulations of the zenith angle, azimuth angle, and other astronomical calculations. ","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.instantiate()  # Install all dependencies\nusing Insolation   \nusing Dates\n\n# Calculate insolation for a specific location and time\nFT = Float64\nlat = FT(40.0)    # degrees North\nlon = FT(-105.0)  # degrees East\ndate = DateTime(2024, 6, 21, 12, 0, 0)  # Summer solstice, noon\n\n# Create Earth parameters\nusing ClimaParams\nparams = InsolationParameters(FT)\n\n# Calculate instantaneous insolation with solar geometry\nF, S, μ, ζ = insolation(date, lat, lon, params)\n# F: TOA insolation [W m⁻²]\n# S: Solar flux [W m⁻²]  \n# μ: Cosine of solar zenith angle\n# ζ: Solar azimuth angle [radians]","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is the instantaneous insolation at the given location and time. Here's the daily averaged insolation at the same location and time:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Calculate daily-averaged insolation\nF_daily, S_daily, μ_daily = daily_insolation(date, lat, params)","category":"page"},{"location":"#Documentation-Outline","page":"Home","title":"Documentation Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"GettingStarted.md\",\n    \"InsolationExamples.md\",\n    \"Milankovitch.md\",\n    \"SolarGeometry.md\",\n    \"library.md\"\n]\nDepth = 1","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Insolation.jl is being developed by the Climate Modeling Alliance. The package was created for use with ClimaAtmos.jl, RRTMGP.jl, and other CliMA packages as part of the broader CliMA ecosystem.","category":"page"},{"location":"SolarGeometry/#Solar-Geometry-and-Insolation","page":"Mathematical Background","title":"Solar Geometry and Insolation","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"This page provides the mathematical formulations used in Insolation.jl to calculate solar geometry and insolation. The equations are from Tapio Schneider and Lenka Novak's textbook draft \"Physics of Earth's Climate\", Chapter 3.","category":"page"},{"location":"SolarGeometry/#Overview","page":"Mathematical Background","title":"Overview","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Calculating solar position in the sky and insolation requires a sequence of astronomical computations that determine:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The planet's position in its orbit (mean and true anomaly)\nThe latitude of the subsolar point (declination)\nThe longitude relative to solar noon (hour angle)\nThe geometric relationships between the sun and a surface location (zenith and azimuth angles)\nThe planet-star distance for radiation calculations","category":"page"},{"location":"SolarGeometry/#Mean-Anomaly","page":"Mathematical Background","title":"Mean Anomaly","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The mean anomaly M represents the angular position of a planet in its orbit, assuming uniform circular motion. For an elliptical orbit, this is a convenient starting point for more accurate calculations.","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The mean anomaly at current time t is","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"M = frac2pi (t - t_0)Y_a + M_0","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where we have:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The time at the epoch (J2000), t_0, typically defined as January 1, 2000 at 12:00 Terrestrial Time (TT), corresponding to 11:59 UTC\nThe mean anomaly at the epoch, M_0 [radians]\nThe length of the anomalistic year, Y_a (period from perihelion to perihelion) [seconds]","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The mean anomaly increases linearly with time at a rate of 2piY_a radians per second.","category":"page"},{"location":"SolarGeometry/#True-Anomaly","page":"Mathematical Background","title":"True Anomaly","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The true anomaly A is the actual angular position of the planet in its elliptical orbit, measured from perihelion (the point of closest approach to the star). Unlike the mean anomaly, the true anomaly accounts for the planet's varying orbital speed due to Kepler's laws.","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The true anomaly is computed from the mean anomaly using a series expansion,","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"A = M + left( 2e - frac14e^3 right) sin(M) + frac54 e^2 sin(2M) + frac1312 e^3 sin(3M)","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where e is the orbital eccentricity. This series approximation is accurate to order e^3 and is sufficient for Earth's relatively circular orbit (e approx 0017).","category":"page"},{"location":"SolarGeometry/#Solar-Longitude","page":"Mathematical Background","title":"Solar Longitude","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The solar longitude L_s (also called ecliptic longitude or true longitude) specifies the planet's position along its orbital path relative to vernal equinox. It combines the orbital phase (true anomaly A) with the helioecentric longitude of perihelion varpi (angular distance of perihelion relative to vernal equinox):","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"L_s = A + varpi","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"For Earth, varpi varies slowly due to precession (period sim21,000 years).","category":"page"},{"location":"SolarGeometry/#Declination","page":"Mathematical Background","title":"Declination","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The solar declination delta is the angle between the sun's rays and the equatorial plane, or the latitude of the subsolar point (where the sun is in zenith at solar noon). It determines the subsolar latitude (where the sun is directly overhead at solar noon). The declination varies between pmgamma (obliquity) over the course of a year.","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The sine of the declination angle is","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"sin delta = sin gamma sin L_s","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where we have:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The orbital obliquity gamma (axial tilt) [radians]\nThe solar longitude L_s [radians]","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"For Earth's current obliquity of gamma approx 2344, the declination ranges from -2344 (winter solstice) to +2344 (summer solstice), passing through 0 at the equinoxes.","category":"page"},{"location":"SolarGeometry/#Equation-of-Time","page":"Mathematical Background","title":"Equation of Time","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The equation of time corrects for the difference between apparent solar time (when the sun is actually at its highest point) and mean solar time (uniform clock time). This discrepancy arises from two effects:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The elliptical orbit causes varying orbital speed (eccentricity effect)\nThe tilted axis projects the sun's motion onto the equatorial plane (obliquity effect)","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The equation-of-time hour angle correction [radians] is","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Delta eta = -2 e sin(M) + tan^2(gamma2) sin(2M+2varpi)","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where the first term accounts for orbital eccentricity and the second for axial tilt. This can be converted to a time correction through Delta t = Deltaeta T_d(2pi), where T_d is the length of the solar day. The equation of time correction can be up to ±16 minutes for Earth, explaining why sundials and clocks disagree throughout the year.","category":"page"},{"location":"SolarGeometry/#Hour-Angle","page":"Mathematical Background","title":"Hour Angle","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The hour angle eta measures the angular distance of the sun from the local meridian (north-south line). It quantifies how far past (or before) solar noon we are at a given location:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Local solar noon: eta = 0  \nIn the afternoon: eta  0 \nIn the morning: eta  0  ","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The hour angle is calculated from the time of day, with equation of time correction, and adjusted for longitude:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"eta = left( eta_textuncorrected + Deltaeta right) + lambda","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where we have:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The uncorrected hour angle at the prime meridian (0° longitude), eta_textuncorrected = 2pi t_textday [radians]\nThe fractional time of day at the prime meridian(0 at midnight, 0.5 at noon), t_textday [dimensionless]\nThe equation of time hour angle correction, Deltaeta [radians]\nThe longitude lambda [radians]","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"All terms are taken modulo 2pi for proper angle wrapping. The factor 2pi converts fractional day to angle.","category":"page"},{"location":"SolarGeometry/#Zenith-Angle","page":"Mathematical Background","title":"Zenith Angle","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The zenith angle theta is the angle between the sun's rays and the vertical direction (zenith) at a location. It determines how directly sunlight strikes a surface:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Sun directly overhead (zenith): theta = 0 \nSun at the horizon (sunrise/sunset): theta = 90 \nSun below the horizon (night): theta  90 ","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The cosine of the zenith angle is","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"cos theta = cos phi cos delta cos eta + sin phi sin delta","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where we have:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The latitude, phi [radians], positive northward\nThe solar declination angle, delta [radians]\nThe hour angle, eta [radians]","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"This is a fundamental equation in solar geometry. The incident solar radiation is proportional to cos theta, which is why high solar zenith angles (low sun) produce less heating than low zenith angles (overhead sun).","category":"page"},{"location":"SolarGeometry/#Sunrise/Sunset-Angle","page":"Mathematical Background","title":"Sunrise/Sunset Angle","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The sunrise/sunset hour angle eta_d is the hour angle at which the sun crosses the horizon. It determines the length of day and night:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Day length = 2eta_d (in radians, or multiply by T_d(2pi) for seconds)\nIf tan phi tan delta  1: polar day (eta_d = pi) or polar night (eta_d = 0)","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The sunrise/sunset hour angle is given by","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"cos eta_d = - tan phi tan delta","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where this equation comes from setting theta = 90 (sun at horizon) in the zenith angle formula. The negative sign reflects that sunrise occurs at negative hour angles and sunset at positive hour angles.","category":"page"},{"location":"SolarGeometry/#Diurnally-Averaged-Insolation","page":"Mathematical Background","title":"Diurnally Averaged Insolation","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The diurnally averaged (daily-mean) insolation requires averaging cos theta over a full 24-hour period. This is helpful for conceptual models and simpler climate models that do not resolve the full diurnal cycle.","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Since insolation is proportional to cos theta, we need overlinecos theta, the time-averaged cosine of the zenith angle. This can be computed analytically from the sunrise/sunset hour angle:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"overlinecos theta = frac1pi left( eta_d sin phi sin delta + cos phi cos delta sin eta_d right)","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Physical interpretation:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The 1pi factor normalizes the average over the daylight period\nWhen eta_d = 0 (polar night), overlinecos theta = 0 (no insolation)\nWhen eta_d = pi (polar day), overlinecos theta = sin phi sin delta (24-hour average)\nAt the equator (phi = 0) during equinox (delta = 0), the formula reduces to (2pi) cos phi cos delta = 2pi approx 0637","category":"page"},{"location":"SolarGeometry/#Azimuth-Angle","page":"Mathematical Background","title":"Azimuth Angle","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The azimuth angle zeta specifies the compass direction to the sun, measured from north. It is essential for tracking solar panels, understanding shading, and computing radiation on tilted surfaces.","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The azimuth angle is","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"zeta = frac3pi2 - arctan left( fracsin etacos eta sin phi - tan delta cos phi right)","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Convention in this package:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Sun due East: zeta = 0 (or 2pi) \nSun due North: zeta = pi2 \nSun due West: zeta = pi\nSun due South: zeta = 3pi2 ","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The azimuth increases counter-clockwise when viewed from above. At local solar noon (eta = 0), the sun is due south in the Northern Hemisphere (zeta = 3pi2) or due north in the Southern Hemisphere.","category":"page"},{"location":"SolarGeometry/#Planet-Star-Distance","page":"Mathematical Background","title":"Planet-Star Distance","text":"","category":"section"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The planet-star distance d varies throughout the year due to the elliptical orbit. This variation affects the solar flux received at the top of atmosphere through the inverse square law (S propto 1d^2).","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The distance is calculated from the equation for the orbital ellipse:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"d = frac1-e^21+ecos A d_0","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"where we have:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"The orbital eccentricity e (0 for circular, 0e1 for elliptical) [unitless]\nThe true anomaly A [radians]\nThe semi-major axis d_0 (mean planet-star distance) [meters]","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"For Earth:","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Semi-major axis d_0 = 1 AU approx 1496 times 10^11 m\nEccentricity e approx 00167 (current value, varies over millennia)\nPerihelion (closest): d approx 0983 AU (early January)\nAphelion (farthest): d approx 1017 AU (early July)\nThe pm 17 variation in distance causes a pm 34 variation in solar flux","category":"page"},{"location":"SolarGeometry/","page":"Mathematical Background","title":"Mathematical Background","text":"Earth is closest to the sun during Northern Hemisphere winter, but the obliquity effect dominates over the distance effect in determining seasons.","category":"page"}]
}
